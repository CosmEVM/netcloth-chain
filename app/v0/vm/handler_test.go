package vm

import (
	"fmt"
	"strings"
	"testing"

	"github.com/stretchr/testify/require"

	abci "github.com/tendermint/tendermint/abci/types"

	"github.com/netcloth/netcloth-chain/app/v0/vm/types"
	sdk "github.com/netcloth/netcloth-chain/types"
)

func TestInvalidMsg(t *testing.T) {
	k := Keeper{}
	h := NewHandler(k)

	res, err := h(sdk.NewContext(nil, abci.Header{}, false, nil), sdk.NewTestMsg())
	require.NotNil(t, err)
	require.Nil(t, res)
	require.True(t, strings.Contains(err.Error(), "unrecognized vm message type"))
}

func TestMsgContractCreateAndCall(t *testing.T) {
	acc := GetTestAccount()
	code := sdk.FromHex("60606040523462000000576040516200140638038062001406833981016040528080519060200190919080518201919060200180519060200190919080518201919050505b83600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836003819055508260009080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000dd57805160ff19168380011785556200010e565b828001600101855582156200010e579182015b828111156200010d578251825591602001919060010190620000f0565b5b5090506200013691905b808211156200013257600081600090555060010162000118565b5090565b50508060019080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200018657805160ff1916838001178555620001b7565b82800160010185558215620001b7579182015b82811115620001b657825182559160200191906001019062000199565b5b509050620001df91905b80821115620001db576000816000905550600101620001c1565b5090565b505081600260006101000a81548160ff021916908360ff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050505b6111b380620002536000396000f300606060405236156100c3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100c8578063095ea7b31461015e57806318160ddd146101b257806323b872dd146101d5578063313ce5671461024857806342966c681461027157806370a08231146102a65780638da5cb5b146102ed57806395d89b411461033c578063a9059cbb146103d2578063cd4217c11461040e578063d7a78db814610455578063dd62ed3e1461048a575b610000565b34610000576100d56104f0565b6040518080602001828103825283818151815260200191508051906020019080838360008314610124575b80518252602083111561012457602082019150602081019050602083039250610100565b505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3461000057610198600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061058e565b604051808215151515815260200191505060405180910390f35b34610000576101bf61062b565b6040518082815260200191505060405180910390f35b346100005761022e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610631565b604051808215151515815260200191505060405180910390f35b3461000057610255610a57565b604051808260ff1660ff16815260200191505060405180910390f35b346100005761028c6004808035906020019091905050610a6a565b604051808215151515815260200191505060405180910390f35b34610000576102d7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bbd565b6040518082815260200191505060405180910390f35b34610000576102fa610bd5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3461000057610349610bfb565b6040518080602001828103825283818151815260200191508051906020019080838360008314610398575b80518252602083111561039857602082019150602081019050602083039250610374565b505050905090810190601f1680156103c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b346100005761040c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c99565b005b346100005761043f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f27565b6040518082815260200191505060405180910390f35b34610000576104706004808035906020019091905050610f3f565b604051808215151515815260200191505060405180910390f35b34610000576104da600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061110c565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105865780601f1061055b57610100808354040283529160200191610586565b820191906000526020600020905b81548152906001019060200180831161056957829003601f168201915b505050505081565b600060008211151561059f57610000565b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190505b92915050565b60035481565b600060008373ffffffffffffffffffffffffffffffffffffffff16141561065757610000565b60008211151561066657610000565b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156106b257610000565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101561073f57610000565b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156107c857610000565b610811600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611131565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061089d600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361114b565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610966600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611131565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b600260009054906101000a900460ff1681565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610ab857610000565b600082111515610ac757610000565b610b10600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611131565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b5f60035483611131565b6003819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b919050565b60056020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c915780601f10610c6657610100808354040283529160200191610c91565b820191906000526020600020905b815481529060010190602001808311610c7457829003601f168201915b505050505081565b60008273ffffffffffffffffffffffffffffffffffffffff161415610cbd57610000565b600081111515610ccc57610000565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610d1857610000565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015610da557610000565b610dee600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611131565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e7a600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261114b565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050565b60066020528060005260406000206000915090505481565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610f8d57610000565b600082111515610f9c57610000565b610fe5600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611131565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611071600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361114b565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e0836040518082815260200191505060405180910390a2600190505b919050565b6007602052816000526040600020602052806000526040600020600091509150505481565b600061113f83831115611177565b81830390505b92915050565b60006000828401905061116c8482101580156111675750838210155b611177565b8091505b5092915050565b80151561118357610000565b5b505600a165627a7a723058207a46e2745c52539f959d3a704341af48fbcf8b40a4c97ff6b91341edfc4d7c160029")

	fmt.Println(fmt.Sprintf("addr: %s, nonce: %d", acc.GetAddress().String(), acc.GetSequence()))
	contractAddr := CreateAddress(acc.GetAddress(), acc.GetSequence())
	fmt.Println(fmt.Sprintf("contract addr: %s", contractAddr.String()))

	k, ctx := setupTest()
	handler := NewHandler(k)

	// test ContractCreate
	msgCreate := types.NewMsgContract(acc.GetAddress(), nil, code, sdk.NewInt64Coin(sdk.NativeTokenName, 0))
	require.NotNil(t, msgCreate)
	require.Equal(t, msgCreate.Route(), RouterKey)
	require.Equal(t, msgCreate.Type(), types.TypeMsgContract)

	resCreate, err := handler(ctx, msgCreate)
	require.Nil(t, err)
	if len(resCreate.Log) > 0 {
		fmt.Println("logs: ", resCreate.Log)
	}
	require.NotNil(t, k.StateDB.GetCode(contractAddr))

	// test ContractCall
	/*
		msgCall := types.NewMsgContract(fromAddr, contractAddr, sdk.NewInt64Coin(sdk.NativeTokenName, 0), common.FromHex("a17a9e660000000000000000000000000000000000000000000000000000000000000002"))
		require.NotNil(t, msgCall)
		require.Equal(t, msgCall.Route(), RouterKey)
		require.Equal(t, msgCall.Type(), types.TypeMsgContract)

		resCall := handler(ctx, msgCall)
		require.True(t, resCall.IsOK())
		if len(resCall.Log) > 0 {
			fmt.Println("logs: ", resCall.Log)
		}
	*/
}
